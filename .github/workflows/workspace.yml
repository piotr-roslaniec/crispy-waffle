name: Workspace

on:
  pull_request:
    paths-ignore:
      - README.md
  push:
    branches:
      - main
    paths-ignore:
      - README.md
    tags:
      - v*

env:
  RUSTFLAGS: "-Dwarnings"

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable
          components: clippy, rustfmt
      - uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-
      - run: cargo clippy --all --all-features -- -D warnings
      - run: cargo fmt --all -- --check
      - name: Install cargo-machete
        uses: baptiste0928/cargo-install@v1
        with:
          crate: cargo-machete
      - run: cargo machete
      - name: Install cargo-sort
        uses: baptiste0928/cargo-install@v1
        with:
          crate: cargo-sort
      - run: cargo sort --check

  test:
    runs-on: ubuntu-latest
    needs: [ check ]
    strategy:
      matrix:
        include:
          # TODO: We don't have to worry about that just yet
          # - target: x86_64-unknown-linux-gnu
          #   rust: 1.67 # MSRV, `cargo msrv`
          - target: x86_64-unknown-linux-gnu
            rust: stable
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          targets: ${{ matrix.target }}
      - uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-
      - run: cargo check --all-features
      - run: cargo test --release

  wasm-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          # TODO: We don't have to worry about that just yet
          # - 1.67 # MSRV
          - stable
        target:
          - wasm32-unknown-unknown
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          targets: ${{ matrix.target }}
      - run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
      - run: wasm-pack test --node
        working-directory: shielder-wasm
  
  yarn-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - stable
        target:
          - wasm32-unknown-unknown
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          targets: ${{ matrix.target }}
      - run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
      - run: wasm-pack build --target nodejs
        working-directory: shielder-wasm
      # TODO: Enable after adding tests etc.
      # - uses: borales/actions-yarn@v3.0.0
      #   with:
      #     cmd: --cwd shielder-wasm/examples/node install
      # - uses: borales/actions-yarn@v3.0.0
      #   with:
      #     cmd: --cwd shielder-wasm/examples/node build
      # - uses: borales/actions-yarn@v3.0.0
      #   with:
      #     cmd: --cwd shielder-wasm/examples/node test

  codecov:
    runs-on: ubuntu-latest
    needs: [ test ]
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable
          targets: x86_64-unknown-linux-gnu
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      # Only checking the coverage of the main library,
      # bindings are covered by their language's tests.
      - name: Generate code coverage
        run: cargo llvm-cov --workspace --lcov --output-path lcov.info --no-default-features
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: lcov.info
          fail_ci_if_error: true

  # TODO: Just compiling benchmarks for now
  compile-benchmarks:
    runs-on: ubuntu-latest
    needs: [ test ]
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable
          targets: x86_64-unknown-linux-gnu
      - name: Compile benchmarks
        run: cargo bench --no-run --no-default-features
