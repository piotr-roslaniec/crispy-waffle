name: Workspace

on:
  pull_request:
    paths-ignore:
      - README.md
  push:
    branches:
      - main
    paths-ignore:
      - README.md
    tags:
      - v*

env:
  # Disables usage of "sparse" IO protocol which breaks CI causing
  # "usage of sparse registries requires `-Z sparse-registry" error
  # TODO: Investigate this behavior & maybe fix it
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: git
  RUST_TOOLCHAIN: nightly-2024-02-06

jobs:
  rust-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          target: x86_64-unknown-linux-gnu
          components: clippy, rustfmt, rust-src
      - uses: actions/cache@v4
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-x86_64-unknown-linux-gnu
          restore-keys: ${{ runner.os }}-cargo-
      # TODO: Fix error `error: Did you forget to enable `atomics` and `bulk-memory` features as outlined in wasm-bindgen-rayon README?`
      # - run: cargo clippy --all --all-features -- -D warnings
      - run: cargo fmt --all -- --check
      - name: Install cargo-machete
        uses: baptiste0928/cargo-install@v3
        with:
          crate: cargo-machete
      - run: cargo machete
      - name: Install cargo-sort
        uses: baptiste0928/cargo-install@v3
        with:
          crate: cargo-sort
      - run: cargo sort --check
      - run: cargo test --release

# TODO: Enable this test after fixing `wasm-pack test` running on GitHub Actions
#  wasm-pack-test:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@
#      # TODO: Cache apt packages. Currently fails to install because it needs apt update first
#      #      - uses: awalsh128/cache-apt-pkgs-action@v1
#      #        with:
#      #          packages: libnss3-tools
#      #          version: 1.0
#      #      - uses: ConorMacBride/install-package@v1
#      #        with:
#      #          apt: libnss3-tools
#      - run: sudo apt update -y && sudo apt install -y libnss3
#      - uses: dtolnay/rust-toolchain@v1
#        with:
#          toolchain: ${{ env.RUST_TOOLCHAIN }}
#          targets: wasm32-unknown-unknown
#      - uses: actions/cache@v4
#        continue-on-error: false
#        with:
#          path: |
#            ~/.cargo/bin/
#            ~/.cargo/registry/index/
#            ~/.cargo/registry/cache/
#            ~/.cargo/git/db/
#            target/
#          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
#          restore-keys: ${{ runner.os }}-cargo-
#      - name: Add Rust source component (`rust-src`)
#        run: rustup component add rust-src
#      - run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
# # TODO: Currently fails because of misconfigured browser drivers
#      - run: bash ./scripts/test_ci.bash
#        working-directory: shielder-wasm
  
  wasm-ts-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          target: wasm32-unknown-unknown
          components: rust-src
      - uses: actions/cache@v4
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-wasm32-unknown-unknown
          restore-keys: ${{ runner.os }}-cargo-
        # TODO: Always install a pinned wasm-pack version, everywhere
      - run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
      - run: ./scripts/build.bash nodejs
        env:
          # Putting WASM-related config into env vars here because for some reason we don't pick up
          # shielder-wasm/.cargo/config.toml on CI
          # TODO: Investigate this behavior & maybe fix it
          RUSTFLAGS: "-D warnings -C target-feature=+atomics,+bulk-memory,+mutable-globals -C link-arg=--max-memory=4294967296"
        working-directory: shielder-wasm
      # TODO: Enable after adding tests etc.
      # - uses: borales/actions-yarn@v3.0.0
      #   with:
      #     cmd: --cwd shielder-wasm/examples/node install
      # - uses: borales/actions-yarn@v3.0.0
      #   with:
      #     cmd: --cwd shielder-wasm/examples/node build
      # - uses: borales/actions-yarn@v3.0.0
      #   with:
      #     cmd: --cwd shielder-wasm/examples/node test

  test-ts:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [ 18.x ]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          targets: wasm32-unknown-unknown
          components: rust-src
      - uses: actions/cache@v4
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-wasm32-unknown-unknown
      # Need to build WASM first, then the extension
      # TODO: Always install a pinned wasm-pack version, everywhere
      - run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
      - run: ./scripts/build.bash web
        env:
          # Putting WASM-related config into env vars here because for some reason we don't pick up
          # shielder-wasm/.cargo/config.toml on CI
          # TODO: Investigate this behavior & maybe fix it
          RUSTFLAGS: "-D warnings -C target-feature=+atomics,+bulk-memory,+mutable-globals -C link-arg=--max-memory=4294967296"
        working-directory: shielder-wasm
      # TODO: Implement pnpm caching in other places too
      - name: Cache pnpm modules
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-
      - uses: pnpm/action-setup@v3.0.0
        with:
          version: latest
          run_install: true
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4.0.2
        with:
          node-version: ${{ matrix.node-version }}
          cache: "pnpm"
          cache-dependency-path: shielder-ts/pnpm-lock.yaml
      - run: pnpm install --frozen-lockfile
        working-directory: shielder-ts
      - run: pnpm lint
        working-directory: shielder-ts
      - run: pnpm build
        working-directory: shielder-ts
      - run: pnpm test
        working-directory: shielder-ts
      - run: pnpm e2e
        env:
          # TODO: Create a separate job for benchmarks
          TEST_OR_BENCHMARK: test
        working-directory: shielder-ts
      # TODO: Temporary, until we have a better way to access test outputs
      - run: cat apps/shielder-runner-web/test-outputs/*.csv
        working-directory: shielder-ts
      - run: cat apps/shielder-runner-web/test-outputs/*.log
        working-directory: shielder-ts

  codecov:
    runs-on: ubuntu-latest
    needs: [ rust-test ]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          target: x86_64-unknown-linux-gnu
      - uses: actions/cache@v4
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-x86_64-unknown-linux-gnu
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      # Only checking the coverage of the main library,
      # bindings are covered by their language's tests.
      - name: Generate code coverage
        run: cargo llvm-cov --workspace --lcov --output-path lcov.info --no-default-features
      # TODO: Also upload the coverage of the pnpm workspace after setting up tests with coverage
      - name: Upload Rust coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: lcov.info
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: piotr-roslaniec/crispy-waffle

  # TODO: Just compiling benchmarks for now
  compile-benchmarks:
    runs-on: ubuntu-latest
    needs: [ rust-test ]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          targets: x86_64-unknown-linux-gnu
      - name: Compile benchmarks
        run: cargo bench --no-run --no-default-features
